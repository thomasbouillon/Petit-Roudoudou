generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Image {
  url                String
  uid                String
  placeholderDataUrl String?
}

type File {
  url String
  uid String
}

model Fabric {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        Image
  previewImage Image?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups   FabricGroup[] @relation(fields: [groupIds], references: [id])
  groupIds String[]      @db.ObjectId

  tags   FabricTag[] @relation(fields: [tagIds], references: [id])
  tagIds String[]    @db.ObjectId

  /// [SizeTuple]
  size Json
}

model FabricGroup {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  fabrics   Fabric[] @relation(fields: [fabricIds], references: [id])
  fabricIds String[] @db.ObjectId
}

model FabricTag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  fabrics   Fabric[] @relation(fields: [fabricIds], references: [id])
  fabricIds String[] @db.ObjectId
}

enum SettingKey {
  allowNewOrdersWithCustomArticles
  allowNewOrdersWithReducedManufacturingTimes
}

model Setting {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  key  SettingKey
  data Boolean
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  password  String?
  firstName String?
  lastName  String?
  role      Role

  cart Cart?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum GiftCardStatus {
  CLAIMED
  UNCLAIMED
}

model GiftCard {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  consumedAmount Float
  image          Image
  createdAt      DateTime @default(now())

  status    GiftCardStatus
  userId    String?        @db.ObjectId
  userEmail String?
}

model Review {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  score      Int
  authorId   String @db.ObjectId
  authorName String

  articleId String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())
}

enum PromotionCodeType {
  FIXED_AMOUNT
  PERCENTAGE
  FREE_SHIPPING
}

type PromotionCodeConditions {
  minAmount  Float?
  validUntil DateTime?
  usageLimit Int?
}

enum PromotionCodeFiltersArticleCategory {
  IN_STOCK
  CUSTOMIZED
}

type PromotionCodeFilters {
  category  PromotionCodeFiltersArticleCategory?
  articleId String?                              @db.ObjectId
}

model PromotionCode {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // --- shared ---
  code       String
  type       PromotionCodeType
  used       Int
  conditions PromotionCodeConditions
  // --- end shared ---

  // --- type percentage or fixed amount ---
  discount Float?
  filters  PromotionCodeFilters?
  // --- end type percentage or fixed amount ---
}

type Sku {
  uid         String
  price       Float
  weight      Int
  enabled     Boolean
  composition String

  /// [SkuCharacteristics]
  characteristics Json
}

type ArticleSeo {
  title       String
  description String
}

type ArticleStockInherits {
  /// [ArticleStockInheritsCustomizables]
  customizables Json
}

type ArticleStock {
  uid              String
  title            String
  description      String
  shortDescription String
  images           Image[]
  slug             String
  sku              String
  stock            Int
  seo              ArticleSeo
  inherits         ArticleStockInherits
}

model Article {
  id                           String         @id @default(auto()) @map("_id") @db.ObjectId
  name                         String
  namePlural                   String
  slug                         String
  description                  String
  shortDescription             String
  threeJsModel                 File
  threeJsInitialCameraDistance Float
  threeJsAllAxesRotation       Boolean
  images                       Image[]
  skus                         Sku[]
  seo                          ArticleSeo
  stocks                       ArticleStock[]
  aggregatedRating             Float?

  reviews   Review[] @relation()
  reviewIds String[] @db.ObjectId // manually synced

  /// [ArticleCharacteristics]
  characteristics Json

  /// [ArticleCustomizables]
  customizables Json

  updatedAt DateTime @updatedAt
}

model Cart {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  totalTaxExcluded Float
  totalTaxIncluded Float
  totalWeight      Float

  /// [CartTaxes]
  taxes Json

  // draftOrder TODO

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  /// [CartItem]
  items Json[]

  updatedAt DateTime @updatedAt
}
