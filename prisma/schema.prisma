generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Image {
  url                String
  uid                String
  placeholderDataUrl String?
}

type File {
  url String
  uid String
}

model Fabric {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        Image
  previewImage Image?
  enabled      Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups   FabricGroup[] @relation(fields: [groupIds], references: [id])
  groupIds String[]      @db.ObjectId

  tags   FabricTag[] @relation(fields: [tagIds], references: [id])
  tagIds String[]    @db.ObjectId

  /// [SizeTuple]
  size Json
}

model FabricGroup {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  fabrics   Fabric[] @relation(fields: [fabricIds], references: [id])
  fabricIds String[] @db.ObjectId
}

model FabricTag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  fabrics   Fabric[] @relation(fields: [fabricIds], references: [id])
  fabricIds String[] @db.ObjectId
}

enum SettingKey {
  allowNewOrdersWithCustomArticles
  allowNewOrdersWithReducedManufacturingTimes
}

model Setting {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  key  SettingKey
  data Boolean
}

enum Role {
  ADMIN
  USER
  ANONYMOUS
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  password  String?
  firstName String?
  lastName  String?
  role      Role

  cart   Cart?
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ResetPasswordToken ResetPasswordToken[]
  workshopSessions   WorkshopSession[]    @relation(fields: [workshopSessionIds], references: [id])
  workshopSessionIds String[]             @db.ObjectId
}

enum GiftCardStatus {
  CLAIMED
  UNCLAIMED
}

model GiftCard {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  consumedAmount Float
  image          Image
  createdAt      DateTime @default(now())

  status    GiftCardStatus
  userId    String?        @db.ObjectId
  userEmail String?
}

model Review {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  score      Int
  authorId   String @db.ObjectId
  authorName String

  articleId String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())
}

enum PromotionCodeType {
  FIXED_AMOUNT
  PERCENTAGE
  FREE_SHIPPING
}

type PromotionCodeConditions {
  minAmount  Float?
  validUntil DateTime?
  usageLimit Int?
}

enum PromotionCodeFiltersArticleCategory {
  IN_STOCK
  CUSTOMIZED
}

type PromotionCodeFilters {
  category  PromotionCodeFiltersArticleCategory?
  articleId String?                              @db.ObjectId
}

model PromotionCode {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // --- shared ---
  code       String                  @unique
  type       PromotionCodeType
  used       Int
  conditions PromotionCodeConditions
  // --- end shared ---

  // --- type percentage or fixed amount ---
  discount Float?
  filters  PromotionCodeFilters?
  // --- end type percentage or fixed amount ---
}

type ArticleThemeSeo {
  title       String
  description String
}

model ArticleTheme {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String @unique

  articles Article[] @relation()

  seo ArticleThemeSeo?
}

type EstimatedShipping {
  priceTaxIncluded Float
  minDays          Int
  maxDays          Int

  /// ['deliver-at-home' | 'deliver-at-pickup-point']
  mode        String
  countryCode String
}

type Sku {
  uid         String
  price       Float
  weight      Int
  enabled     Boolean
  composition String
  gtin        String?

  estimatedShippingDetails EstimatedShipping[]

  /// [SkuCharacteristics]
  characteristics Json

  customizableVariantUid String?
}

type ArticleSeo {
  title       String @default("")
  description String @default("")
}

type ArticleStockInherits {
  /// [ArticleStockInheritsCustomizables]
  customizables Json
}

type ArticleStockOverrides {
  price Float?
}

type ArticleStock {
  uid              String
  title            String
  description      String
  shortDescription String
  fullDescription  String?
  images           Image[]
  slug             String
  sku              String
  stock            Int
  seo              ArticleSeo
  inherits         ArticleStockInherits
  fabricIds        String[]             @db.ObjectId

  overrides ArticleStockOverrides?
}

type Vector3 {
  x Float
  y Float
  z Float
}

type CustomizablePart {
  uid                  String
  label                String
  fabricListId         String
  threeJsModelPartId   String
  threeJsEulerRotation Vector3?
  size                 Int[]
}

type CustomizableVariant {
  uid                          String
  name                         String
  image                        Image
  threeJsModel                 File
  threeJsInitialCameraDistance Float
  threeJsAllAxesRotation       Boolean
  threeJsInitialEulerRotation  Vector3?
  inherits                     String[] // list of inherited option ids
  disclaimer                   String?
  customizableParts            CustomizablePart[]
}

model Article {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  namePlural       String
  slug             String
  description      String
  shortDescription String
  position         Int?

  images           Image[]
  skus             Sku[]
  seo              ArticleSeo
  stocks           ArticleStock[]
  aggregatedRating Float?
  minQuantity      Int?

  theme   ArticleTheme? @relation(fields: [themeId], references: [id])
  themeId String?       @db.ObjectId

  reviews   Review[] @relation()
  reviewIds String[] @db.ObjectId // manually synced

  /// [ArticleCharacteristics]
  characteristics Json

  /// [ArticleOptions]
  customizables Json

  customizableVariants CustomizableVariant[]

  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // totalTaxExcluded Float
  // totalTaxIncluded Float
  // totalWeight      Float

  draftOrder   Order?  @relation(fields: [draftOrderId], references: [id])
  draftOrderId String? @unique @db.ObjectId

  /// [CartTaxes]
  // taxes Json

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  /// [CartItem]
  items Json[]

  updatedAt DateTime @updatedAt
}

enum OrderWorkflowStep {
  PRODUCTION
  SHIPPING
  DELIVERED
}

type OrderExtraPrice {
  priceTaxExcluded Float
  priceTaxIncluded Float
}

type OrderExtras {
  reduceManufacturingTimes OrderExtraPrice?
}

enum Civility {
  MR
  MRS
}

enum OrderPaymentMethod {
  BANK_TRANSFER
  CARD
  GIFT_CARD
}

type OrderBilling {
  civility          Civility
  firstName         String
  lastName          String
  address           String
  addressComplement String
  zipCode           String
  city              String
  country           String

  // if paid with stripe
  amountPaidWithGiftCards Float?
  checkoutSessionId       String?
  checkoutSessionUrl      String?
  /// [OrderBillingGiftCards]
  giftCards               Json
  paymentMethod           OrderPaymentMethod
}

enum OrderManufacturingTimesUnit {
  DAYS
  WEEKS
  MONTHS
}

type OrderManufacturingTimes {
  min  Int
  max  Int
  unit OrderManufacturingTimesUnit
}

// COPY of PromotionCode without id
type OrderPromotionCode {
  code       String
  type       PromotionCodeType
  used       Int
  conditions PromotionCodeConditions
  discount   Float?
  filters    PromotionCodeFilters?
}

enum OrderStaus {
  DRAFT
  WAITING_BANK_TRANSFER
  PAID
}

model Order {
  id                  String                   @id @default(auto()) @map("_id") @db.ObjectId
  reference           Int                      @unique
  status              OrderStaus
  totalTaxExcluded    Float
  totalTaxIncluded    Float
  subTotalTaxExcluded Float
  subTotalTaxIncluded Float
  totalWeight         Float
  /// [OrderItem]
  items               Json[]
  /// [OrderTaxes]
  taxes               Json
  extras              OrderExtras
  billing             OrderBilling
  /// [OrderShipping]
  shipping            Json
  manufacturingTimes  OrderManufacturingTimes? // when contains customized articles
  promotionCode       OrderPromotionCode?
  invoice             File?
  giftOffered         Boolean
  adminComment        String?

  userCardIfDraft Cart? @relation()

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime?
  paidAt      DateTime?
  submittedAt DateTime?

  // null until order marked as paid
  workflowStep OrderWorkflowStep?
}

model ResetPasswordToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expiration DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model Piping {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image Image
}

model EmbroideryColor {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image Image
}

model TrackingLink {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String @unique
}

model WorkshopSession {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  image       Image
  description String
  price       Float

  maxCapacity       Int
  remainingCapacity Int

  leaderName String

  startDate DateTime
  endDate   DateTime
  location  String

  attendees   User[]   @relation(fields: [attendeeIds], references: [id])
  attendeeIds String[] @db.ObjectId
}
