name: 'Build & Deploy Petit Roudoudou'

on:
  push:
    branches: [main]

jobs:
  build-push-storefront-image:
    permissions:
      packages: write
    if: "!contains(github.event.head_commit.message, '[skip ci:storefront]')"
    runs-on: ubuntu-latest
    steps:
      - uses: 'actions/checkout@v3'

      - name: 'Setup buildx'
        uses: 'docker/setup-buildx-action@v2'

      - name: 'Login to docker registry'
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ vars.DOCKER_REGISTRY }}

      - name: 'Extend .dockerignore'
        run: |
          echo "\napps/api\napps/functions\napps/scripts" >> .dockerignore

      - name: 'Setup .env'
        run: |
          cat <<EOF > apps/storefront/.env
          ${{ vars.BUILD_ENV_FILE }}
          EOF

      - name: 'Build & Push Docker image (runner)'
        uses: 'docker/build-push-action@v2'
        with:
          context: '.'
          file: './apps/storefront/Dockerfile'
          push: true
          target: 'runner'
          tags: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-storefront:latest
          cache-from: type=gha,scope=main-storefront
          cache-to: type=gha,mode=max,scope=main-storefront

      - name: 'Build & Push Docker image (static assets)'
        uses: 'docker/build-push-action@v2'
        with:
          context: '.'
          file: './apps/storefront/Dockerfile'
          push: true
          target: 'static-assets'
          tags: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-storefront-assets:latest
          cache-from: type=gha,scope=main-storefront-assets
          cache-to: type=gha,mode=max,scope=main-storefront-assets

  build-push-api-image:
    permissions:
      packages: write
    if: "!contains(github.event.head_commit.message, '[skip ci:api]')"
    runs-on: ubuntu-latest
    steps:
      - uses: 'actions/checkout@v3'

      - name: 'Setup buildx'
        uses: 'docker/setup-buildx-action@v2'

      - name: 'Login to docker registry'
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ vars.DOCKER_REGISTRY }}

      - name: 'Extend .dockerignore'
        run: |
          echo "\napps/storefront\napps/functions\napps/scripts" >> .dockerignore

      - name: 'Build & Push Docker image'
        uses: 'docker/build-push-action@v2'
        with:
          context: '.'
          file: './apps/api/Dockerfile'
          push: true
          target: 'runner'
          tags: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-api:latest
          cache-from: type=gha,scope=main-api
          cache-to: type=gha,mode=max,scope=main-api

  deploy-storefront:
    runs-on: ubuntu-latest
    needs: [build-push-storefront-image, deploy-api]
    steps:
      - uses: 'actions/checkout@v3'

      # - name: 'Copy compose file over scp'
      #Â already done in the deploy-api job

      - name: 'Deploy'
        uses: 'appleboy/ssh-action@v1.0.3'
        with:
          host: ${{ secrets.STOREFRONT_SSH_HOST }}
          username: ${{ secrets.STOREFRONT_SSH_USER }}
          password: ${{ secrets.STOREFRONT_SSH_PASSWORD }}
          script_stop: true
          script: |
            cd ${{ secrets.STOREFRONT_DEPLOY_PATH }}
            docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASS $DOCKER_REGISTRY
            docker compose pull storefront storefront-assets
            docker compose up -d storefront storefront-assets
            docker system prune -af
          envs: DOCKER_REGISTRY_USER,DOCKER_REGISTRY_PASS,DOCKER_REGISTRY,STOREFRONT_DOCKER_IMAGE,STOREFRONT_ASSETS_DOCKER_IMAGE,API_DOCKER_IMAGE
        env:
          DOCKER_REGISTRY_USER: ${{ github.actor }}
          DOCKER_REGISTRY_PASS: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
          STOREFRONT_DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-storefront:latest
          STOREFRONT_ASSETS_DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-storefront-assets:latest
          API_DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-api:latest

  deploy-api:
    runs-on: ubuntu-latest
    needs: [build-push-api-image, build-push-storefront-image]
    steps:
      - uses: 'actions/checkout@v3'

      - name: 'Copy compose file over scp'
        uses: 'appleboy/scp-action@v0.1.7'
        with:
          host: ${{ secrets.STOREFRONT_SSH_HOST }}
          username: ${{ secrets.STOREFRONT_SSH_USER }}
          password: ${{ secrets.STOREFRONT_SSH_PASSWORD }}
          source: './docker-compose.yml'
          target: ${{ secrets.STOREFRONT_DEPLOY_PATH }}

      - name: 'Deploy'
        uses: 'appleboy/ssh-action@v1.0.3'
        with:
          host: ${{ secrets.STOREFRONT_SSH_HOST }}
          username: ${{ secrets.STOREFRONT_SSH_USER }}
          password: ${{ secrets.STOREFRONT_SSH_PASSWORD }}
          script_stop: true
          script: |
            cd ${{ secrets.STOREFRONT_DEPLOY_PATH }}
            echo ${{ secrets.GCP_API_SERVICE_ACCOUNT_KEY_BASE64 }} | base64 -d > ./gcp/gcp-sa-key.json
            docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASS $DOCKER_REGISTRY
            docker compose pull api
            docker compose up -d api
            docker system prune -af
          envs: DOCKER_REGISTRY_USER,DOCKER_REGISTRY_PASS,DOCKER_REGISTRY,API_DOCKER_IMAGE,STOREFRONT_DOCKER_IMAGE,STOREFRONT_ASSETS_DOCKER_IMAGE
        env:
          DOCKER_REGISTRY_USER: ${{ github.actor }}
          DOCKER_REGISTRY_PASS: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
          API_DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-api:latest
          STOREFRONT_DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-storefront:latest
          STOREFRONT_ASSETS_DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/thomasbouillon/roudoudou-storefront-assets:latest

  deploy-rules:
    runs-on: ubuntu-latest
    steps:
      - uses: 'actions/checkout@v3'

      - name: Deploy Rules
        uses: w9jds/setup-firebase@v1.0.0
        with:
          GCP_SA_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Deploy Firestore rules
        run: 'firebase deploy --only firestore:rules'

  build-deploy-functions:
    if: "contains(github.event.head_commit.message, '[build:functions]')"
    runs-on: ubuntu-latest
    steps:
      - uses: 'actions/checkout@v3'

      - name: Setup Firebase
        uses: w9jds/setup-firebase@v1.0.0
        with:
          GCP_SA_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: 'Download dependencies (root)'
        run: 'yarn install --frozen-lockfile'

      - name: 'Generate prisma'
        run: 'yarn prisma generate'

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: 'Setup function .env'
        run: |
          cat <<EOF > apps/functions/.env
          ${{ vars.BUILD_FUNCTIONS_ENV_FILE }}
          EOF

      - name: 'cp deps'
        run: 'cp -r node_modules apps/functions/'

      - name: 'Download dependencies (functions)'
        run: 'npm ci'
        working-directory: 'apps/functions'

      - name: 'Build functions'
        run: 'npm run build'
        working-directory: 'apps/functions'

      - name: 'Deploy functions'
        run: 'firebase deploy --only functions'
